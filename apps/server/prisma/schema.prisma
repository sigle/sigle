generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserFlag {
  NONE
  VERIFIED
}

model User {
  id          String    @id @map("id")
  lastLoginAt DateTime? @map("last_login_at")
  flag        UserFlag  @default(NONE) @map("flag")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  drafts     Draft[]
  posts      Post[]
  profile    Profile?
  ownedNfts  PostNft[] @relation("owner")
  mintedNfts PostNft[] @relation("minter")
  sessions   Session[]
  accounts   Account[]

  @@map("user")
}

model Profile {
  id                String      @id @map("id")
  displayName       String?     @map("display_name")
  description       String?     @map("description")
  website           String?     @map("website")
  twitter           String?     @map("twitter")
  pictureUriId      String?     @map("picture_uri_id")
  pictureUri        MediaImage? @relation(fields: [pictureUriId], references: [id], name: "Profile_picture_uri_id_fkey")
  coverPictureUriId String?     @map("cover_picture_uri_id")
  coverPictureUri   MediaImage? @relation(fields: [coverPictureUriId], references: [id], name: "Profile_cover_picture_uri_id_fkey")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [id], references: [id])

  @@map("profile")
}

model Draft {
  id               String   @id @map("id")
  title            String   @map("title")
  content          String   @map("content")
  metaTitle        String?  @map("meta_title")
  metaDescription  String?  @map("meta_description")
  coverImage       String?  @map("cover_image")
  txId             String?  @map("tx_id")
  txStatus         String?  @map("tx_status")
  collectPriceType String?  @map("collect_price_type")
  collectPrice     BigInt?  @map("collect_price")
  collectLimitType String?  @map("collect_limit_type")
  collectLimit     Int?     @map("collect_limit")
  tags             String[] @map("tags")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@map("draft")
}

model Post {
  id          String  @id @map("id")
  version     Int     @map("version")
  address     String  @unique @map("address")
  txId        String  @unique @map("tx_id")
  collected   Int     @map("collected")
  maxSupply   Int     @map("max_supply")
  metadataUri String  @map("metadata_uri")
  enabled     Boolean @map("enabled")
  openEdition Boolean @map("open_edition")

  // Metadata fields
  title           String      @map("title")
  content         String      @map("content")
  excerpt         String      @map("excerpt")
  metaTitle       String?     @map("meta_title")
  metaDescription String?     @map("meta_description")
  coverImageId    String?     @map("cover_image_id")
  coverImage      MediaImage? @relation(fields: [coverImageId], references: [id])
  tags            String[]    @map("tags")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId           String            @map("user_id")
  user             User              @relation(fields: [userId], references: [id])
  nfts             PostNft[]
  minterFixedPrice MinterFixedPrice?

  @@map("post")
}

model MinterFixedPrice {
  id         String @id @map("id")
  price      BigInt @map("price")
  startBlock BigInt @map("start_block")
  endBlock   BigInt @map("end_block")

  post Post @relation(fields: [id], references: [id])

  @@map("minter_fixed_price")
}

model MediaImage {
  id                  String    @id @map("id")
  mimeType            String    @map("mime_type")
  alt                 String?   @map("alt")
  width               Int?      @map("width")
  height              Int?      @map("height")
  size                Int?      @map("size")
  blurhash            String?   @map("blurhash")
  createdAt           DateTime  @default(now()) @map("created_at")
  posts               Post[]
  profilePicture      Profile[] @relation(name: "Profile_picture_uri_id_fkey")
  profileCoverPicture Profile[] @relation(name: "Profile_cover_picture_uri_id_fkey")

  @@map("media_image")
}

model PostNft {
  id String @id @map("id")

  createdAt DateTime @map("created_at")

  postId   String @map("post_id")
  post     Post   @relation(fields: [postId], references: [id])
  ownerId  String @map("owner_id")
  owner    User   @relation(name: "owner", fields: [ownerId], references: [id])
  minterId String @map("minter_id")
  minter   User   @relation(name: "minter", fields: [minterId], references: [id])

  @@map("post_nft")
}

// Model for the rate-limiter-flexible package
// https://github.com/animir/node-rate-limiter-flexible/wiki/Prisma#schema-example
model RateLimiterFlexible {
  key    String    @id
  points Int
  expire DateTime?
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
