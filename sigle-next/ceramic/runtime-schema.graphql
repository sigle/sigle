"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  profile: Profile
  postList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PostConnection
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID

input CreatePostInput {
  content: PostInput!
  clientMutationId: String
}

type CreatePostPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Post!
  clientMutationId: String
}

input CreateProfileInput {
  content: ProfileInput!
  clientMutationId: String
}

type CreateProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Profile!
  clientMutationId: String
}

type Mutation {
  createProfile(input: CreateProfileInput!): CreateProfilePayload
  updateProfile(input: UpdateProfileInput!): UpdateProfilePayload
  createPost(input: CreatePostInput!): CreatePostPayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

input PartialPostInput {
  title: String
  status: PostStatus
  content: String
  metaImage: String
  metaTitle: String
  canonicalUrl: String
  featuredImage: String
  metaDescription: String
}

input PartialProfileInput {
  websiteUrl: String
  description: String
  displayName: String
  twitterUsername: String
}

type Post implements Node {
  id: ID!
  title: String!
  status: PostStatus
  content: String!
  metaImage: String
  metaTitle: String
  canonicalUrl: String
  featuredImage: String
  metaDescription: String

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge"""
  node: Post

  """A cursor for use in pagination"""
  cursor: String!
}

input PostInput {
  title: String!
  status: PostStatus
  content: String!
  metaImage: String
  metaTitle: String
  canonicalUrl: String
  featuredImage: String
  metaDescription: String
}

enum PostStatus {
  DRAFT
  PUBLISHED
  DELETED
}

type Profile implements Node {
  id: ID!
  websiteUrl: String
  description: String
  displayName: String
  twitterUsername: String

  """Current version of the document"""
  version: CeramicCommitID!
}

"""A connection to a list of items."""
type ProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProfileEdge]
}

"""An edge in a connection."""
type ProfileEdge {
  """The item at the end of the edge"""
  node: Profile

  """A cursor for use in pagination"""
  cursor: String!
}

input ProfileInput {
  websiteUrl: String
  description: String
  displayName: String
  twitterUsername: String
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  profileIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): ProfileConnection
  postIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PostConnection
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

input UpdatePostInput {
  id: ID!
  content: PartialPostInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

type UpdatePostPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Post!
  clientMutationId: String
}

input UpdateProfileInput {
  id: ID!
  content: PartialProfileInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

type UpdateProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Profile!
  clientMutationId: String
}

