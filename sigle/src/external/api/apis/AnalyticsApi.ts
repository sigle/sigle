/* tslint:disable */
/* eslint-disable */
/**
 * Sigle API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  ApiAnalyticsHistoricalGet200Response,
  ApiAnalyticsReferrersGet200ResponseInner,
} from '../models';
import {
  ApiAnalyticsHistoricalGet200ResponseFromJSON,
  ApiAnalyticsHistoricalGet200ResponseToJSON,
  ApiAnalyticsReferrersGet200ResponseInnerFromJSON,
  ApiAnalyticsReferrersGet200ResponseInnerToJSON,
} from '../models';

export interface ApiAnalyticsHistoricalGetRequest {
  dateFrom: string;
  dateGrouping: string;
  storyId?: string;
}

export interface ApiAnalyticsReferrersGetRequest {
  dateFrom: string;
  storyId?: string;
}

/**
 * AnalyticsApi - interface
 *
 * @export
 * @interface AnalyticsApiInterface
 */
export interface AnalyticsApiInterface {
  /**
   * Return the historical statistics.
   * @param {string} dateFrom The date from which to get the statistics (e.g. 2022-04-01).
   * @param {string} dateGrouping The date grouping (e.g. day, month). When day is set the date format is YYYY-MM-DD. When month is set the date format is YYYY-MM.
   * @param {string} [storyId] The story id to get the statistics for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnalyticsApiInterface
   */
  apiAnalyticsHistoricalGetRaw(
    requestParameters: ApiAnalyticsHistoricalGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ApiAnalyticsHistoricalGet200Response>>;

  /**
   * Return the historical statistics.
   */
  apiAnalyticsHistoricalGet(
    requestParameters: ApiAnalyticsHistoricalGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ApiAnalyticsHistoricalGet200Response>;

  /**
   * Return the referrer statistics.
   * @param {string} dateFrom The date from which to get the statistics (e.g. 2022-04-01).
   * @param {string} [storyId] The story id to get the statistics for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnalyticsApiInterface
   */
  apiAnalyticsReferrersGetRaw(
    requestParameters: ApiAnalyticsReferrersGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<Array<ApiAnalyticsReferrersGet200ResponseInner>>
  >;

  /**
   * Return the referrer statistics.
   */
  apiAnalyticsReferrersGet(
    requestParameters: ApiAnalyticsReferrersGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<ApiAnalyticsReferrersGet200ResponseInner>>;
}

/**
 *
 */
export class AnalyticsApi
  extends runtime.BaseAPI
  implements AnalyticsApiInterface
{
  /**
   * Return the historical statistics.
   */
  async apiAnalyticsHistoricalGetRaw(
    requestParameters: ApiAnalyticsHistoricalGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ApiAnalyticsHistoricalGet200Response>> {
    if (
      requestParameters.dateFrom === null ||
      requestParameters.dateFrom === undefined
    ) {
      throw new runtime.RequiredError(
        'dateFrom',
        'Required parameter requestParameters.dateFrom was null or undefined when calling apiAnalyticsHistoricalGet.'
      );
    }

    if (
      requestParameters.dateGrouping === null ||
      requestParameters.dateGrouping === undefined
    ) {
      throw new runtime.RequiredError(
        'dateGrouping',
        'Required parameter requestParameters.dateGrouping was null or undefined when calling apiAnalyticsHistoricalGet.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.dateFrom !== undefined) {
      queryParameters['dateFrom'] = requestParameters.dateFrom;
    }

    if (requestParameters.dateGrouping !== undefined) {
      queryParameters['dateGrouping'] = requestParameters.dateGrouping;
    }

    if (requestParameters.storyId !== undefined) {
      queryParameters['storyId'] = requestParameters.storyId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/analytics/historical`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiAnalyticsHistoricalGet200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Return the historical statistics.
   */
  async apiAnalyticsHistoricalGet(
    requestParameters: ApiAnalyticsHistoricalGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ApiAnalyticsHistoricalGet200Response> {
    const response = await this.apiAnalyticsHistoricalGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Return the referrer statistics.
   */
  async apiAnalyticsReferrersGetRaw(
    requestParameters: ApiAnalyticsReferrersGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<Array<ApiAnalyticsReferrersGet200ResponseInner>>
  > {
    if (
      requestParameters.dateFrom === null ||
      requestParameters.dateFrom === undefined
    ) {
      throw new runtime.RequiredError(
        'dateFrom',
        'Required parameter requestParameters.dateFrom was null or undefined when calling apiAnalyticsReferrersGet.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.dateFrom !== undefined) {
      queryParameters['dateFrom'] = requestParameters.dateFrom;
    }

    if (requestParameters.storyId !== undefined) {
      queryParameters['storyId'] = requestParameters.storyId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/analytics/referrers`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ApiAnalyticsReferrersGet200ResponseInnerFromJSON)
    );
  }

  /**
   * Return the referrer statistics.
   */
  async apiAnalyticsReferrersGet(
    requestParameters: ApiAnalyticsReferrersGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<ApiAnalyticsReferrersGet200ResponseInner>> {
    const response = await this.apiAnalyticsReferrersGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
