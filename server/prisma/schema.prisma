generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  stacksAddress String         @unique
  // When was the last sync
  stacksBlock   Int?
  isLegacy      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  newsletter    Newsletter?
  subscriptions Subscription[]
  followers     Follows[]      @relation("following")
  following     Follows[]      @relation("follower")
  Story         Story[]
}

model Subscription {
  id           String             @id @default(uuid())
  status       SubscriptionStatus
  nftId        Int
  downgradedAt DateTime?
  userId       String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  user         User               @relation(fields: [userId], references: [id])
}

enum SubscriptionStatus {
  INACTIVE
  ACTIVE
}

model Story {
  id            String    @id @default(uuid())
  gaiaId        String
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  publishedAt   DateTime?
  unpublishedAt DateTime?
  deletedAt     DateTime?
  user          User      @relation(fields: [userId], references: [id])
  email         Email?
  emailId       String?
}

model Newsletter {
  id                 String           @id @default(uuid())
  mailjetApiKey      String
  mailjetApiSecret   String
  mailjetListId      Int
  mailjetListAddress String
  senderEmail        String?
  status             NewsletterStatus
  userId             String           @unique
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  user               User             @relation(fields: [userId], references: [id])
  Email              Email[]
}

enum NewsletterStatus {
  INACTIVE
  ACTIVE
}

model Email {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  newsletterId String
  newsletter   Newsletter? @relation(fields: [newsletterId], references: [id])
  storyId      String      @unique
  Story        Story       @relation(fields: [storyId], references: [id])
}

// Gaia data
// File: app-data/following.json
model Follows {
  followerAddress  String
  follower         User     @relation("follower", fields: [followerAddress], references: [stacksAddress])
  followingAddress String
  following        User     @relation("following", fields: [followingAddress], references: [stacksAddress])
  createdAt        DateTime

  @@id([followerAddress, followingAddress])
}
